// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: stand.proto

package stand

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StandService_CreateStand_FullMethodName = "/inventory.StandService/CreateStand"
	StandService_ReadStands_FullMethodName  = "/inventory.StandService/ReadStands"
)

// StandServiceClient is the client API for StandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StandServiceClient interface {
	CreateStand(ctx context.Context, in *CreateStandRequest, opts ...grpc.CallOption) (*StandResponse, error)
	ReadStands(ctx context.Context, in *ReadStandsRequest, opts ...grpc.CallOption) (*ReadStandsResponse, error)
}

type standServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStandServiceClient(cc grpc.ClientConnInterface) StandServiceClient {
	return &standServiceClient{cc}
}

func (c *standServiceClient) CreateStand(ctx context.Context, in *CreateStandRequest, opts ...grpc.CallOption) (*StandResponse, error) {
	out := new(StandResponse)
	err := c.cc.Invoke(ctx, StandService_CreateStand_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *standServiceClient) ReadStands(ctx context.Context, in *ReadStandsRequest, opts ...grpc.CallOption) (*ReadStandsResponse, error) {
	out := new(ReadStandsResponse)
	err := c.cc.Invoke(ctx, StandService_ReadStands_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StandServiceServer is the server API for StandService service.
// All implementations should embed UnimplementedStandServiceServer
// for forward compatibility
type StandServiceServer interface {
	CreateStand(context.Context, *CreateStandRequest) (*StandResponse, error)
	ReadStands(context.Context, *ReadStandsRequest) (*ReadStandsResponse, error)
}

// UnimplementedStandServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStandServiceServer struct {
}

func (UnimplementedStandServiceServer) CreateStand(context.Context, *CreateStandRequest) (*StandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStand not implemented")
}
func (UnimplementedStandServiceServer) ReadStands(context.Context, *ReadStandsRequest) (*ReadStandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadStands not implemented")
}

// UnsafeStandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StandServiceServer will
// result in compilation errors.
type UnsafeStandServiceServer interface {
	mustEmbedUnimplementedStandServiceServer()
}

func RegisterStandServiceServer(s grpc.ServiceRegistrar, srv StandServiceServer) {
	s.RegisterService(&StandService_ServiceDesc, srv)
}

func _StandService_CreateStand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandServiceServer).CreateStand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandService_CreateStand_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandServiceServer).CreateStand(ctx, req.(*CreateStandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StandService_ReadStands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadStandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StandServiceServer).ReadStands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StandService_ReadStands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StandServiceServer).ReadStands(ctx, req.(*ReadStandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StandService_ServiceDesc is the grpc.ServiceDesc for StandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "inventory.StandService",
	HandlerType: (*StandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStand",
			Handler:    _StandService_CreateStand_Handler,
		},
		{
			MethodName: "ReadStands",
			Handler:    _StandService_ReadStands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stand.proto",
}
